/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContractsImport } from './routes/contracts'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as ContractsIndexImport } from './routes/contracts/index'
import { Route as ContractsNewImport } from './routes/contracts/new'
import { Route as ContractsLayoutImport } from './routes/contracts/layout'
import { Route as ContractsContractIdImport } from './routes/contracts/$contractId'

// Create/Update Routes

const ContractsRoute = ContractsImport.update({
  id: '/contracts',
  path: '/contracts',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ContractsIndexRoute = ContractsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ContractsRoute,
} as any)

const ContractsNewRoute = ContractsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ContractsRoute,
} as any)

const ContractsLayoutRoute = ContractsLayoutImport.update({
  id: '/layout',
  path: '/layout',
  getParentRoute: () => ContractsRoute,
} as any)

const ContractsContractIdRoute = ContractsContractIdImport.update({
  id: '/$contractId',
  path: '/$contractId',
  getParentRoute: () => ContractsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/contracts': {
      id: '/contracts'
      path: '/contracts'
      fullPath: '/contracts'
      preLoaderRoute: typeof ContractsImport
      parentRoute: typeof rootRoute
    }
    '/contracts/$contractId': {
      id: '/contracts/$contractId'
      path: '/$contractId'
      fullPath: '/contracts/$contractId'
      preLoaderRoute: typeof ContractsContractIdImport
      parentRoute: typeof ContractsImport
    }
    '/contracts/layout': {
      id: '/contracts/layout'
      path: '/layout'
      fullPath: '/contracts/layout'
      preLoaderRoute: typeof ContractsLayoutImport
      parentRoute: typeof ContractsImport
    }
    '/contracts/new': {
      id: '/contracts/new'
      path: '/new'
      fullPath: '/contracts/new'
      preLoaderRoute: typeof ContractsNewImport
      parentRoute: typeof ContractsImport
    }
    '/contracts/': {
      id: '/contracts/'
      path: '/'
      fullPath: '/contracts/'
      preLoaderRoute: typeof ContractsIndexImport
      parentRoute: typeof ContractsImport
    }
  }
}

// Create and export the route tree

interface ContractsRouteChildren {
  ContractsContractIdRoute: typeof ContractsContractIdRoute
  ContractsLayoutRoute: typeof ContractsLayoutRoute
  ContractsNewRoute: typeof ContractsNewRoute
  ContractsIndexRoute: typeof ContractsIndexRoute
}

const ContractsRouteChildren: ContractsRouteChildren = {
  ContractsContractIdRoute: ContractsContractIdRoute,
  ContractsLayoutRoute: ContractsLayoutRoute,
  ContractsNewRoute: ContractsNewRoute,
  ContractsIndexRoute: ContractsIndexRoute,
}

const ContractsRouteWithChildren = ContractsRoute._addFileChildren(
  ContractsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRoute
  '/contracts': typeof ContractsRouteWithChildren
  '/contracts/$contractId': typeof ContractsContractIdRoute
  '/contracts/layout': typeof ContractsLayoutRoute
  '/contracts/new': typeof ContractsNewRoute
  '/contracts/': typeof ContractsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRoute
  '/contracts/$contractId': typeof ContractsContractIdRoute
  '/contracts/layout': typeof ContractsLayoutRoute
  '/contracts/new': typeof ContractsNewRoute
  '/contracts': typeof ContractsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRoute
  '/contracts': typeof ContractsRouteWithChildren
  '/contracts/$contractId': typeof ContractsContractIdRoute
  '/contracts/layout': typeof ContractsLayoutRoute
  '/contracts/new': typeof ContractsNewRoute
  '/contracts/': typeof ContractsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/contracts'
    | '/contracts/$contractId'
    | '/contracts/layout'
    | '/contracts/new'
    | '/contracts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/contracts/$contractId'
    | '/contracts/layout'
    | '/contracts/new'
    | '/contracts'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/contracts'
    | '/contracts/$contractId'
    | '/contracts/layout'
    | '/contracts/new'
    | '/contracts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRoute
  ContractsRoute: typeof ContractsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRoute,
  ContractsRoute: ContractsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/contracts"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx"
    },
    "/contracts": {
      "filePath": "contracts.tsx",
      "children": [
        "/contracts/$contractId",
        "/contracts/layout",
        "/contracts/new",
        "/contracts/"
      ]
    },
    "/contracts/$contractId": {
      "filePath": "contracts/$contractId.tsx",
      "parent": "/contracts"
    },
    "/contracts/layout": {
      "filePath": "contracts/layout.tsx",
      "parent": "/contracts"
    },
    "/contracts/new": {
      "filePath": "contracts/new.tsx",
      "parent": "/contracts"
    },
    "/contracts/": {
      "filePath": "contracts/index.tsx",
      "parent": "/contracts"
    }
  }
}
ROUTE_MANIFEST_END */
